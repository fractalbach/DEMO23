SIDE = 256
DIFFUSE_SIDE = 1024
DIMENSION = 1 # The maximum value a vertex component can be
obj_filename = 'diablo3_pose.obj'
obj_file_data = ''
output_filename = 'model.c'
verts = []
faces = []
texture_indices = []
coordinates = []
img_coords = []


with open(obj_filename, 'r') as file:
    obj_file_data = file.read().split('\n')


# -----------------------------------------------------------------------------
# Extraction
# -----------------------------------------------------------------------------

# Extract values for vertices, which are floats in [-1.00000,+1.00000]
for line in obj_file_data:
    if line[:2] == 'v ':
        verts += [[float(x) for x in line[2:].split(' ')]]

# Extract faces data, which are indices of vertices.
for line in obj_file_data:
    if line[:2] == 'f ':
        indices = [x.split('/') for x in line[2:].split(' ')]
        # face_verts = [int(x.split('/')[0])-1 for x in line[2:].split(' ')]
        faces += [[int(indices[i][0])-1 for i in range(3)]]
        texture_indices += [[int(indices[i][1])-1 for i in range(3)]]

# Extract (u,v) coordinates from the texture mappings
for line in obj_file_data:
    if line[:3] == 'vt ':
        coordinates += [[ float(x) for x in line[4:].split(' ') ]]

# -----------------------------------------------------------------------------
# Processing
# -----------------------------------------------------------------------------

component_max = 0
component_min = 0


# Process the vertices into screen space
for v in verts:
    for i in range(3):
        if i == 1: v[i] = -v[i]  # Flip across horizontal axis

        component_max = max(v[i], component_max)
        component_min = min(v[i], component_min)

        v[i] = int( SIDE * ((v[i] + DIMENSION) / (2*DIMENSION)) )
        if v[i] < 0 or v[i] > SIDE:
            print(f"WARNING: vertex {v} is out of range!")


# Multiply each value in the texture coordinates (u,v) to match diffusion image (x,y)
for c in coordinates:
    u = int(c[0] * DIFFUSE_SIDE)
    v = int((1 - c[1]) * DIFFUSE_SIDE)
    img_coords += [[u,v]]


# -----------------------------------------------------------------------------
# Output
# -----------------------------------------------------------------------------

with open(output_filename, 'w', encoding="utf-8") as f:
    f.write("/* Auto-generated by gen.py, DO NOT EDIT */\n")

    f.write(f'const int model_vertex_count = {len(verts)};\n')

    f.write(f'const int model_face_count = {len(faces)};\n')

    f.write(f'const uint16_t model_verts[{len(verts)}][3] = {{ \n\t')
    for v in verts:
        f.write(f'{{{v[0]},{v[1]},{v[2]}}},')
    f.write('\n};\n')

    f.write(f'const uint16_t model_texture_indices[{len(texture_indices)}][3] = {{ \n\t')
    for v in texture_indices:
        f.write(f'{{{v[0]},{v[1]},{v[2]}}},')
    f.write('\n};\n')

    f.write(f'const uint16_t model_texture_uv[{len(img_coords)}][3] = {{ \n\t')
    for u,v in img_coords:
        f.write(f'{{{u},{v}}},')
    f.write('\n};\n')

    f.write(f'const uint16_t model_faces[{len(faces)}][3] = {{ \n\t')
    for x in faces:
        f.write(f'{{{x[0]},{x[1]},{x[2]}}},')
    f.write('\n};\n')





print(f'generated model from {obj_filename}.')
print(f'number of verts: {len(verts)}')
print(f'number of faces: {len(faces)}')
print(f'number of texture_uvs: {len(img_coords)}')
print(f'max component  : {component_max}')
print(f'min component  : {component_min}')